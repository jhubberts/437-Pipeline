--================================================================================--
--Title: mycpu.vhd
--Description: 
-- File containing pipelined processor (seperate from the RAM).
--Author: John J. Hubberts
--Date: Tuesday, February 05, 2013
--Version: 1.0
--================================================================================--

library ieee;
use ieee.std_logic_1164.all;

entity mycpu is
  port(
    CLK : in std_logic;
    nReset: in std_logic;
    halt : out std_logic;
    ramAddr : out std_logic_vector(15 downto 0);
    ramData : out std_logic_vector(31 downto 0);
    ramWen : out std_logic;
    ramRen : out std_logic;
    ramQ : in std_logic_vector(31 downto 0);
    ramState : in std_logic_vector(1 downto 0)
    );
end mycpu;

architecture dataflow of mycpu is

  --========================--
  -- COMPONENT DECLARATIONS --
  --========================--
  component core is
  port(
    CLK : in std_logic;
    nReset: in std_logic;
    halt : out std_logic;
    ramAddr : out std_logic_vector(15 downto 0);
    ramData : out std_logic_vector(31 downto 0);
    ramWen : out std_logic;
    ramRen : out std_logic;
    ramQ : in std_logic_vector(31 downto 0);
    ramState : in std_logic_vector(1 downto 0)

  );
  end component;

  component coherence_controller is 
  port (
    clk             : in std_logic;
    nReset          : in std_logic;

    ramAddr0 : in std_logic_vector(15 downto 0);
    ramData0 : in std_logic_vector(31 downto 0);
    ramWen0 : in std_logic;
    ramRen0 : in std_logic;
    ramQ0 : out std_logic_vector(31 downto 0);
    ramState0 : out std_logic_vector(1 downto 0);

    ramAddr1 : in std_logic_vector(15 downto 0);
    ramData1 : in std_logic_vector(31 downto 0);
    ramWen1 : in std_logic;
    ramRen1 : in std_logic;
    ramQ1 : out std_logic_vector(31 downto 0);
    ramState1 : out std_logic_vector(1 downto 0)
    
  );
 end component;

  component arbitrator is
  port(
    clk : in std_logic;
    nReset : in std_logic;
	--core0
	ramAddr0 : out std_logic_vector(15 downto 0);
    ramData0 : out std_logic_vector(31 downto 0);
    ramWen0 : out std_logic;
    ramRen0 : out std_logic;
    ramQ0 : in std_logic_vector(31 downto 0);
    ramState0 : in std_logic_vector(1 downto 0);
	--core1
	ramAddr1 : out std_logic_vector(15 downto 0);
    ramData1 : out std_logic_vector(31 downto 0);
    ramWen1 : out std_logic;
    ramRen1 : out std_logic;
    ramQ1 : in std_logic_vector(31 downto 0);
    ramState1 : in std_logic_vector(1 downto 0);

	--signals from the coherence controller
  );
  end component;

  

  --=====================--
  -- SIGNAL DECLARATIONS --
  --=====================--
	--core 0 signals
	signal ramAddr0		:  std_logic_vector(15 downto 0);
    signal ramData0 	:  std_logic_vector(31 downto 0);
    signal ramWen0 		:  std_logic;
    signal ramRen0 		:  std_logic;
    signal ramQ0 		:  std_logic_vector(31 downto 0);
    signal ramState0 	:  std_logic_vector(1 downto 0);

	--core 1 signals
	signal ramAddr1 	:  std_logic_vector(15 downto 0);
    signal ramData1 	:  std_logic_vector(31 downto 0);
    signal ramWen1 		:  std_logic;
    signal ramRen1 		:  std_logic;
    signal ramQ1 		:  std_logic_vector(31 downto 0);
    signal ramState1 	:  std_logic_vector(1 downto 0);


begin

  core0 : core port map(
	CLK => CLK,
    nReset => nReset,
    halt => halt,
    ramAddr => ramAddr0,
    ramData => ramData0,
    ramWen => ramWen0,
    ramRen => ramRen0,
    ramQ => ramQ0,
    ramState =>ramState0
);
 
  core1 : core port map(
	CLK => CLK,
    nReset => nReset,
    halt => halt,
    ramAddr => ramAddr1,
    ramData => ramData1,
    ramWen => ramWen1,
    ramRen => ramRen1,
    ramQ => ramQ1,
    ramState =>ramState1
);

  coco : coherence_controller port map(
    clk            	=> CLK,
    nReset         	=> nReset, 
	halt 			=> halt,
    ramAddr 		=> ramAddr0,
    ramData			=> ramData0,
    ramWen 			=> ramWen0,
    ramRen 			=> ramRen0,
    ramQ 			=> ramQ0,
    ramState 		=> ramState0,
	ramAddr 		=> ramAddr1,
    ramData			=> ramData1,
    ramWen 			=> ramWen1,
    ramRen 			=> ramRen1,
    ramQ 			=> ramQ1,
    ramState		=> ramState1
  );

 
  arb : arbitrator port map(
    clk => CLK,
    nReset => nReset,
	ramAddr0		=> ramAddr0,
    ramData0			=> ramData0,
    ramWen0 			=> ramWen0,
    ramRen0 			=> ramRen0,
    ramQ0 			=> ramQ0,
    ramState0 		=> ramState0,
	ramAddr1 		=> ramAddr1,
    ramData1			=> ramData1,
    ramWen1 			=> ramWen1,
    ramRen1 			=> ramRen1,
    ramQ1 			=> ramQ1,
    ramState1		=> ramState1
  );

end dataflow;
